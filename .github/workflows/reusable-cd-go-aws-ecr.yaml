# Reusable workflow for building and pushing Docker images to Amazon ECR
name: reusable-cd-go-aws-ecr

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (dev, qa, stg, prd, etc.)"
        required: true
        type: string
      component:
        description: "Logical component name (e.g. base)"
        required: true
        type: string
      go_path:
        description: "Path (relative) to the Go project root (directory containing go.mod). Used as default Docker context."
        required: true
        type: string
      ecr_registry:
        description: "Target ECR registry URL (e.g. 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com). If empty, uses login output."
        required: false
        type: string
      ecr_repository:
        description: "Target ECR repository name"
        required: true
        type: string
      docker_context:
        description: "Docker build context path"
        required: false
        type: string
      dockerfile:
        description: "Dockerfile path"
        required: false
        type: string
        default: "Dockerfile"
      image_tag:
        description: "Image tag to push"
        required: false
        type: string
      platform:
        description: "Docker build platform(s) (e.g. linux/arm64 or linux/amd64,linux/arm64)"
        required: false
        type: string
        default: "linux/arm64"
    secrets:
      AWS_IAM_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    permissions:
      contents: read
      id-token: write # For AWS OIDC
    env:
      GO_PROJECT_PATH: ${{ inputs.go_path }}
      AWS_IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare image metadata
        id: meta
        run: |
          IMAGE_TAG="${{ inputs.image_tag }}"
          if [ -z "$IMAGE_TAG" ]; then IMAGE_TAG="${GITHUB_SHA::12}"; fi
          REGISTRY_INPUT="${{ inputs.ecr_registry }}"
          if [ -z "$REGISTRY_INPUT" ]; then REGISTRY_INPUT="${{ steps.login-ecr.outputs.registry }}"; fi
          REPOSITORY="${{ inputs.ecr_repository }}"
          DOCKER_CONTEXT="${{ inputs.docker_context }}"
          if [ -z "$DOCKER_CONTEXT" ]; then DOCKER_CONTEXT="${{ env.GO_PROJECT_PATH }}"; fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "registry=$REGISTRY_INPUT" >> $GITHUB_OUTPUT
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          echo "docker_context=$DOCKER_CONTEXT" >> $GITHUB_OUTPUT
          echo "dockerfile_path=${{ inputs.dockerfile }}" >> $GITHUB_OUTPUT
          echo "platforms=${{ inputs.platform }}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.meta.outputs.docker_context }}
          file: ${{ steps.meta.outputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.registry }}/${{ steps.meta.outputs.repository }}:${{ steps.meta.outputs.image_tag }}
          platforms: ${{ steps.meta.outputs.platforms }}

      - name: Summary
        if: always()
        run: |
          echo "Pushed image: ${{ steps.meta.outputs.registry }}/${{ steps.meta.outputs.repository }}:${{ steps.meta.outputs.image_tag }}" | tee -a $GITHUB_STEP_SUMMARY
