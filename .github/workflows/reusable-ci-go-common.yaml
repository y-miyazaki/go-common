# Reusable workflow for Go CI operations
# This workflow runs Go tests and golangci-lint. It is intended to be called from other workflows.
name: reusable-ci-go-common

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (dev, qa, stg, prd, etc.)"
        required: true
        type: string
      component:
        description: "Logical component name (e.g. base)"
        required: true
        type: string
      go_path:
        description: "Path (relative) to the Go project root (directory containing go.mod)"
        required: true
        type: string

env:
  ENV: ${{ inputs.environment }}
  COMPONENT: ${{ inputs.component }}
  GO_PROJECT_PATH: ${{ inputs.go_path }}
  GO_VERSION: "1.24.6" # Update here if Go version changes
  GOLANGCI_LINT_VERSION: "v2.3.1" # Update here if golangci-lint version changes

jobs:
  test_and_lint:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    # environment:
    #   name: ${{ inputs.environment }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Determine Go cache paths
        id: go-cache-paths
        working-directory: ${{ env.GO_PROJECT_PATH }}
        run: |
          echo "gomodcache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
          echo "gocache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go build and module caches
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.gomodcache }}
            ${{ steps.go-cache-paths.outputs.gocache }}
          key: go-cache-${{ env.ENV }}-${{ env.COMPONENT }}-${{ runner.os }}-${{ env.GO_VERSION }}-${{ hashFiles(format('{0}/go.sum', env.GO_PROJECT_PATH)) }}
          restore-keys: |
            go-cache-${{ env.ENV }}-${{ env.COMPONENT }}-${{ runner.os }}-${{ env.GO_VERSION }}-
            go-cache-${{ env.ENV }}-${{ env.COMPONENT }}-${{ runner.os }}-

      # - name: Show Go Environment
      #   run: go env
      #   working-directory: ${{ env.GO_PROJECT_PATH }}

      - name: Download Go Modules
        run: go mod download
        working-directory: ${{ env.GO_PROJECT_PATH }}

      - name: Run Go Tests (with race + coverage)
        run: |
          mkdir -p coverage
          go test ./... -race -count=1 -covermode=atomic -coverprofile=coverage/coverage.out
          go tool cover -func=coverage/coverage.out | tee coverage/coverage.txt
        working-directory: ${{ env.GO_PROJECT_PATH }}

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ env.COMPONENT }}-${{ env.ENV }}
          path: ${{ env.GO_PROJECT_PATH }}/coverage

      - name: Install govulncheck
        working-directory: ${{ env.GO_PROJECT_PATH }}
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      # Do not fail the job on vulnerabilities; save reports as artifacts instead
      - name: Run govulncheck (no-fail, save artifacts)
        working-directory: ${{ env.GO_PROJECT_PATH }}
        continue-on-error: true
        run: |
          mkdir -p security
          # JSON report for machine processing
          govulncheck -format=json ./... > security/govulncheck-${{ env.COMPONENT }}-${{ env.ENV }}.json || true
          # Text report for easy reading
          govulncheck ./... > security/govulncheck-${{ env.COMPONENT }}-${{ env.ENV }}.txt || true

      - name: Upload govulncheck Artifact
        uses: actions/upload-artifact@v4
        with:
          name: govulncheck-${{ env.COMPONENT }}-${{ env.ENV }}
          path: ${{ env.GO_PROJECT_PATH }}/security

      # https://github.com/aquasecurity/trivy-action/tree/0.29.0/?tab=readme-ov-file#inputs
      - name: Trivy Vulnerability Scan (Go modules)
        uses: aquasecurity/trivy-action@0.29.0
        with:
          exit-code: 1
          format: table
          scan-ref: .
          scan-type: "config"
          trivy-config: trivy.yaml
          severity: HIGH,CRITICAL

      - name: Generate SBOM (CycloneDX)
        working-directory: ${{ env.GO_PROJECT_PATH }}
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy fs --format cyclonedx --output sbom-${{ env.COMPONENT }}-${{ env.ENV }}.json .

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.COMPONENT }}-${{ env.ENV }}
          path: ${{ env.GO_PROJECT_PATH }}/sbom-${{ env.COMPONENT }}-${{ env.ENV }}.json

      - name: GolangCI-Lint via reviewdog (PR inline comments)
        if: github.event_name == 'pull_request'
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workdir: ${{ env.GO_PROJECT_PATH }}
          reporter: github-pr-review
          fail_level: error
          filter_mode: added
          go_version: ${{ env.GO_VERSION }}
          golangci_lint_flags: "--config=.golangci.yaml --new-from-rev=origin/${{ github.event.pull_request.base.ref }}"
          golangci_lint_version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Enforce golangci-lint (non-PR)
        if: github.event_name != 'pull_request'
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: ${{ env.GO_PROJECT_PATH }}
          args: --config=.golangci.yaml --max-same-issues=0 --max-issues-per-linter=0

      - name: Summary
        if: always()
        run: |
          echo "Go CI completed for component: ${{ env.COMPONENT }} in env: ${{ env.ENV }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts (download from run page below):" >> $GITHUB_STEP_SUMMARY
          echo "- coverage-${{ env.COMPONENT }}-${{ env.ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- govulncheck-${{ env.COMPONENT }}-${{ env.ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- sbom-${{ env.COMPONENT }}-${{ env.ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run page (artifacts available): ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "GolangCI-Lint: See annotations (push) or PR review comments (pull_request)." >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" != "success" ]; then
            echo "One or more steps failed. See logs above for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Post PR failure comment
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const artifacts = [
              `coverage-${process.env.COMPONENT}-${process.env.ENV}`,
              `govulncheck-${process.env.COMPONENT}-${process.env.ENV}`,
              `sbom-${process.env.COMPONENT}-${process.env.ENV}`,
            ].join('\n- ');
            const body = `‚ùå Go CI failed for component: ${process.env.COMPONENT} (env: ${process.env.ENV})\n\n`+
              `Run page (artifacts available): ${runUrl}\n\n`+
              `Artifacts:\n- ${artifacts}\n\n`+
              `See inline PR review comments from golangci-lint (via reviewdog) for details.\n\n`+
              `Re-run guidance:\n- Fix issues locally\n- Commit & push to trigger CI again.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
